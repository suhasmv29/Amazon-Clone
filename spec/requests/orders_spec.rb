 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/orders", type: :request do

  describe "GET /index" do
    let!(:user) { create(:user) }
    context 'When user has signed in' do
      before do
        sign_in(user)
      end
      it "renders a successful response" do
        order = create(:order, user_id: user.id, email: user.email)
        get orders_url
        expect(response).to be_successful
      end
    end
    context 'When user has not signed in' do
      it "renders a unsuccessful response" do
        order = create(:order, user_id: user.id, email: user.email)
        get orders_url
        expect(response).not_to be_successful
        expect(response).to have_http_status(302)
        expect(response).to redirect_to(new_user_session_path) 
      end
    end 
  end

  describe "GET /show" do
    let!(:user) { create(:user) }

    context 'when user has signed' do
      before do
        sign_in(user)
      end
      it "renders a successful response" do
        order = create(:order, user_id: user.id, email: user.email)
        get order_url(order)
        expect(response).to be_successful
      end
    end
    context 'when user has not signed' do
      it "renders a unsuccessful response" do
        order = create(:order, user_id: user.id, email: user.email)
        get order_url(order)
        expect(response).not_to be_successful
        expect(response).to have_http_status(302)
        expect(response).to redirect_to(new_user_session_path)       end
    end

  end

  describe "GET /new" do
    let!(:user) { create(:user) }

    context 'User must signed in' do
      before do
        sign_in(user)
      end

      it "renders a successful response" do

        get new_order_url
        expect(response).to redirect_to(store_index_path)
        expect(flash[:notice]).to match(/Your cart is empty*/)
      end
      it "should get new" do
        category = create(:category)
        product = create(:product, category_id: category.id)
        post line_items_url, params: { product_id: product.id }
        get new_order_url
        assert_response :success
      end
    end
    context 'when user has not signed' do
      it "renders a unsuccessful response" do
        order = create(:order, user_id: user.id, email: user.email)
        get new_order_url
        expect(response).not_to be_successful
        expect(response).to have_http_status(302)
        expect(response).to redirect_to(store_index_url)
      end
    end
    
  end

  describe "GET /edit" do
    let!(:user) { create(:user) }


    context 'User signed in' do
      before do
        sign_in(user)
      end
      it "render a successful response" do
        order = create(:order, user_id: user.id, email: user.email)
        get edit_order_url(order)
        expect(response).to be_successful
      end
    end
    context 'when user has not signed' do
      it "renders a unsuccessful response" do
        order = create(:order, user_id: user.id, email: user.email)
        get edit_order_url(order)
        expect(response).not_to be_successful
        expect(response).to have_http_status(302)
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

  describe "POST /create" do
    let!(:user) { create(:user) }

    context "with valid parameters" do
      before do
        sign_in(user) 
      end
      it "creates a new Order" do
        expect {
          order = build(:order, user_id: user.id, email: user.email)

          post orders_url, params: { order: { address: order.address,
            email: order.email, name: order.name,
            pay_type: order.pay_type } }
        }.to change(Order, :count).by(1)
      end
      it "redirects to the created order" do
        order = build(:order, user_id: user.id, email: user.email)

        post orders_url, params: { order: { address: order.address,
          email: order.email, name: order.name,
          pay_type: order.pay_type } }
        expect(response).to redirect_to(new_charge_path)
      end
    end

    context "with invalid parameters" do
      before do
        sign_in(user) 
      end
      it "does not create a new order" do
        expect {
          order = build(:order, user_id: user.id, email: user.email)

          post orders_url, params: { order: { address: order.address,
            email: order.email, name: order.name } }
        }.to change(Order, :count).by(0)
      end

      it "renders new page" do
        order = build(:order, user_id: user.id, email: user.email)

        post orders_url, params: { order: { address: order.address,
          email: order.email, name: order.name } }
        expect(response).to be_successful
        expect(response).to render_template(:new)
      end

    end

    context 'when user has not signed' do
      it "renders a unsuccessful response" do
        order = create(:order, user_id: user.id, email: user.email)
        post orders_url, params: { order: { address: order.address,
          email: order.email, name: order.name,
          pay_type: order.pay_type } }
        expect(response).not_to be_successful
        expect(response).to have_http_status(302)
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

  describe "PATCH /update" do
    let!(:user) { create(:user) }

    context "with valid parameters" do
      before do
        sign_in(user) 
      end


      it "updates the requested order" do
        order = create(:order, user_id: user.id, email: user.email)
        patch order_url(order),params: { order: { address: order.address,
          email: order.email, name: order.name,
          pay_type: order.pay_type } }
        order.reload
      end

      it "redirects to the order" do
        order = create(:order, user_id: user.id, email: user.email)
        patch order_url(order), params: { order: { address: order.address,
          email: order.email, name: order.name,
          pay_type: order.pay_type } }
        order.reload
        expect(response).to redirect_to(order_url(order))
      end
    end

    context "with invalid parameters" do
      before do
        sign_in(user)

      end
      it "renders edit page" do
        order = create(:order, user_id: user.id, email: user.email)
        order.address = ''
        patch order_url(order),params: { order: { address: order.address,
          email: order.email, name: order.name,
          pay_type: order.pay_type } }
        expect(response).to be_successful
        expect(response).to render_template(:edit)
      end
    end

    context 'when user has not signed' do
      it "renders a unsuccessful response" do
        order = create(:order, user_id: user.id, email: user.email)
        post orders_url, params: { order: { address: order.address,
          email: order.email, name: order.name,
          pay_type: order.pay_type } }
        expect(response).not_to be_successful
        expect(response).to have_http_status(302)
        expect(response).to redirect_to(new_user_session_path)
      end
    end
  end

  describe "DELETE /destroy" do
    let!(:user) { create(:user) }

    context 'when user has signed in' do
      before do
        sign_in(user)
      end

      it "destroys the requested order" do
        order = create(:order, user_id: user.id, email: user.email)
        expect {
          delete order_url(order)
        }.to change(Order, :count).by(-1)
      end
  
      it "redirects to the orders list" do
        order = create(:order, user_id: user.id, email: user.email)
        delete order_url(order)
        expect(response).to redirect_to(orders_url)
      end
    end

    context 'when user has not signed' do
      it "renders a unsuccessful response" do
        order = create(:order, user_id: user.id, email: user.email)
        delete order_url(order)
        expect(response).not_to be_successful
        expect(response).to have_http_status(302)
        expect(response).to redirect_to(new_user_session_path)
      end
    end
    
  end
end
